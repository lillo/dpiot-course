#+TITLE: Network Programming in Java 2
#+OPTIONS: H:4 toc:nil num:nil
#+LANGUAGE: en
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="http://gongzhitaao.org/orgcss/org.css"/>

In the following exercises, use the classes [[https://docs.oracle.com/javase/8/docs/api/java/io/ObjectInputStream.html][ObjectInputStream]] and
[[https://docs.oracle.com/javase/8/docs/api/java/io/ObjectOutputStream.html][ObjectOutputStream]] to perform the data exchange.  Please, refer to these two
discussions ([[https://stackoverflow.com/questions/30766459/why-does-order-of-instantiation-seem-to-matter-for-input-and-output-streams-in-j][here]] and [[https://stackoverflow.com/questions/27736175/how-to-send-receive-objects-using-sockets-in-java][here]]) and the [[https://docs.oracle.com/javase/8/docs/api/java/io/ObjectInputStream.html#ObjectInputStream-java.io.InputStream-][ObjectInputstream]] documentation for a
correct instantiation of [[https://docs.oracle.com/javase/8/docs/api/java/io/ObjectInputStream.html][ObjectInputStream]] and [[https://docs.oracle.com/javase/8/docs/api/java/io/ObjectOutputStream.html][ObjectOutputStream]].

* Exercise 1

Write a TCP server that listens on port 8888 and works as a database to store
clinical records.  A clinical record is an instance of the class ~PatientRecord~
#+BEGIN_SRC java
  import java.io.Serializable;

  public class PatientRecord implements Serializable {
	  final public String recordId;
	  final public String patientId;
	  final public String testId;

	  public PatientRecord(String recordId, String patientId, String testId) {
		  this.recordId = recordId;
		  this.patientId = patientId;
		  this.testId = testId;
	  }
  }
#+END_SRC
A client can send two kinds of messages:
 1) the client sends an instance of ~PatientRecord~: the server stores the new
    record in the database and answers by sending the string "OK stored!";
 2) the client sends a string representing a ~patientId~: the server computes
    the number $n$ of records it stores for that patient and answer by sending the
    string "Records: $n$".

Finally, write a client to test your server.

* Exercise 2

Write a TCP server that waits for incoming connections on port 9999 and that
allows clients to submit tasks.

A task is an instance of the interface ~Task~
#+BEGIN_SRC java
  import java.io.Serializable;

  public interface Task extends Serializable {
	  public Integer execute(Integer n);
  }
#+END_SRC
For example, the following task computes the sum from $0$ to $n$ (it requires $n
\geq 0$):
#+BEGIN_SRC java
  new Task() {
	  @Override
	  public Integer execute(Integer n) {
		  int result = 0;
		  while(n > 0) {
			  result += n;
			  n--;
		  }
		  return result;
	  }
  }
#+END_SRC

When a client connects, it sends to the server a message containing the task to
run and the input.  The server executes the task using the provided input and
sends back the result to the client.  Finally, test your server by writing a
client that submits the two tasks:
 1) find the factorial of a given number $n$
 2) compute the $n$ th number of Fibonacci
