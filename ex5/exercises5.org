#+TITLE: Writing gRPC Services
#+OPTIONS: H:4 toc:nil num:nil
#+LANGUAGE: en
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="http://gongzhitaao.org/orgcss/org.css"/>


* Exercise 1
Extend the clinical record database we discussed during tha class by adding a
new method
#+BEGIN_SRC
rpc addRecord(PatientRecord) returns (Result_t){}
#+END_SRC
where the type ~Result_t~ represents a protocol buffer message with a ~string~
field used to report outcome of operation.  Moreover, write a client to test
your service.

* Exercise 2
Re-implement the remote clock service of [[../ex3/exercises3.org][Exercise 3 of problem set 3]] using gRPC.
Then, write a client to test your implementation.  Finally, discuss and compare
the implementation you made using Jersey with the one using gRPC.

* Exercise 3
Re-implement the service TempSensor of [[../ex3/exercises3.org][problem set 3]] using gRPC. Then, implement
a client to test your service. Finally, discuss and compare the implementation
you made in Jersey and in RMI with the one in gRPC.  Which solution is shorter
in term of line of code?  Which solution is easier to understand?  Which
solution is more interoperable? Provide an example.
